{"version":3,"sources":["logo.svg","components/Table/index.js","data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","useState","employees","setEmployees","currentSort","setCurrentSort","sortString","tableProp","descSortedEmployees","sort","a","b","localeCompare","sortedEmployees","sortNumber","type","onChange","event","filter","target","value","filteredEmployees","name","search","RegExp","onClick","map","age","salary","title","key","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,oHCqG5BC,EAnGD,SAACC,GAAW,IAAD,EACWC,mBAASD,EAAME,WAD1B,mBAChBA,EADgB,KACLC,EADK,OAEeF,mBAAS,IAFxB,mBAEhBG,EAFgB,KAEHC,EAFG,KAIjBC,EAAa,SAACC,GAClB,GAAIA,IAAcH,EAAa,CAC7B,IAAMI,EAAsBR,EAAME,UAAUO,MAAK,SAACC,EAAGC,GAAJ,OAC/CA,EAAEJ,GAAWK,cAAcF,EAAEH,OAE/BF,EAAe,IACfF,EAAaK,OACR,CACL,IAAMK,EAAkBb,EAAME,UAAUO,MAAK,SAACC,EAAGC,GAAJ,OAC3CD,EAAEH,GAAWK,cAAcD,EAAEJ,OAE/BF,EAAeE,GACfJ,EAAaU,KAIXC,EAAa,SAACP,GAClB,GAAIA,IAAcH,EAAa,CAC7B,IAAMI,EAAsBR,EAAME,UAAUO,MAC1C,SAACC,EAAGC,GAAJ,OAAUA,EAAEJ,GAAaG,EAAEH,MAE7BF,EAAe,IACfF,EAAaK,OACR,CACL,IAAMK,EAAkBb,EAAME,UAAUO,MACtC,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,GAAaI,EAAEJ,MAE7BF,EAAeE,GACfJ,EAAaU,KAoBjB,OACE,oCACE,gDAEE,2BAAOE,KAAK,OAAOC,SApBL,SAACC,GACnB,IAAMC,EAASD,EAAME,OAAOC,MACtBC,EAAoBrB,EAAME,UAAUgB,QACxC,mBAAwD,IAAxD,EAAGI,KAAgBC,OAAO,IAAIC,OAAON,EAAQ,SAE/Cf,EAAakB,OAiBX,+BACE,4BACE,+BACE,wBACEI,QAAS,WACPnB,EAAW,UAFf,QAOA,wBACEmB,QAAS,WACPX,EAAW,SAFf,OAOA,wBACEW,QAAS,WACPX,EAAW,YAFf,gBAOA,wBACEW,QAAS,WACPnB,EAAW,WAFf,WASJ,4BACE,+BAAQJ,EAAUwB,KAhDD,SAAC,GAAD,IAAGJ,EAAH,EAAGA,KAAMK,EAAT,EAASA,IAAKC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,MAAtB,OACvB,wBAAIC,IAAKR,GACP,4BAAKA,GACL,4BAAKK,GACL,4BAAKC,GACL,4BAAKC,YCnDI,GACb,CAAEP,KAAM,OAAQK,IAAK,GAAIC,OAAQ,IAAOC,MAAO,WAC/C,CAAEP,KAAM,QAASK,IAAK,GAAIC,OAAQ,KAAOC,MAAO,WAChD,CAAEP,KAAM,cAAeK,IAAK,GAAIC,OAAQ,IAAOC,MAAO,WACtD,CAAEP,KAAM,WAAYK,IAAK,GAAIC,OAAQ,KAAQC,MAAO,MACpD,CAAEP,KAAM,QAASK,IAAK,GAAIC,OAAQ,IAAOC,MAAO,aAChD,CAAEP,KAAM,QAASK,IAAK,GAAIC,OAAQ,KAAOC,MAAO,qBAChD,CAAEP,KAAM,OAAQK,IAAK,GAAIC,OAAQ,KAAQC,MAAO,QCSnCE,EATH,WACV,OACE,oCACE,kDACA,kBAAC,EAAD,CAAO7B,UAAW8B,MCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d6989d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\n\r\nconst Table = (props) => {\r\n  const [employees, setEmployees] = useState(props.employees);\r\n  const [currentSort, setCurrentSort] = useState(\"\");\r\n\r\n  const sortString = (tableProp) => {\r\n    if (tableProp === currentSort) {\r\n      const descSortedEmployees = props.employees.sort((a, b) =>\r\n        b[tableProp].localeCompare(a[tableProp])\r\n      );\r\n      setCurrentSort(\"\");\r\n      setEmployees(descSortedEmployees);\r\n    } else {\r\n      const sortedEmployees = props.employees.sort((a, b) =>\r\n        a[tableProp].localeCompare(b[tableProp])\r\n      );\r\n      setCurrentSort(tableProp);\r\n      setEmployees(sortedEmployees);\r\n    }\r\n  };\r\n\r\n  const sortNumber = (tableProp) => {\r\n    if (tableProp === currentSort) {\r\n      const descSortedEmployees = props.employees.sort(\r\n        (a, b) => b[tableProp] - a[tableProp]\r\n      );\r\n      setCurrentSort(\"\");\r\n      setEmployees(descSortedEmployees);\r\n    } else {\r\n      const sortedEmployees = props.employees.sort(\r\n        (a, b) => a[tableProp] - b[tableProp]\r\n      );\r\n      setCurrentSort(tableProp);\r\n      setEmployees(sortedEmployees);\r\n    }\r\n  };\r\n\r\n  const filterTable = (event) => {\r\n    const filter = event.target.value;\r\n    const filteredEmployees = props.employees.filter(\r\n      ({ name }) => name.search(new RegExp(filter, \"i\")) !== -1\r\n    );\r\n    setEmployees(filteredEmployees);\r\n  };\r\n\r\n  const generateTableRow = ({ name, age, salary, title }) => (\r\n    <tr key={name}>\r\n      <td>{name}</td>\r\n      <td>{age}</td>\r\n      <td>{salary}</td>\r\n      <td>{title}</td>\r\n    </tr>\r\n  );\r\n  return (\r\n    <>\r\n      <label>\r\n        Filter by Name\r\n        <input type=\"text\" onChange={filterTable} />\r\n      </label>\r\n      <table>\r\n        <tr>\r\n          <thead>\r\n            <th\r\n              onClick={() => {\r\n                sortString(\"name\");\r\n              }}\r\n            >\r\n              Name\r\n            </th>\r\n            <th\r\n              onClick={() => {\r\n                sortNumber(\"age\");\r\n              }}\r\n            >\r\n              Age\r\n            </th>\r\n            <th\r\n              onClick={() => {\r\n                sortNumber(\"salary\");\r\n              }}\r\n            >\r\n              Salary (USD)\r\n            </th>\r\n            <th\r\n              onClick={() => {\r\n                sortString(\"title\");\r\n              }}\r\n            >\r\n              Title\r\n            </th>\r\n          </thead>\r\n        </tr>\r\n        <tr>\r\n          <tbody>{employees.map(generateTableRow)}</tbody>\r\n        </tr>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","export default [\r\n  { name: \"Alan\", age: 25, salary: 30000, title: \"Manager\" },\r\n  { name: \"Billy\", age: 29, salary: 32000, title: \"Laborer\" },\r\n  { name: \"Christopher\", age: 36, salary: 70000, title: \"Cleaner\" },\r\n  { name: \"Caroline\", age: 59, salary: 120000, title: \"HR\" },\r\n  { name: \"Susan\", age: 22, salary: 30000, title: \"QA Tester\" },\r\n  { name: \"Dylan\", age: 44, salary: 24000, title: \"Assistant Cleaner\" },\r\n  { name: \"Lisa\", age: 31, salary: 160000, title: \"CEO\" },\r\n];\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Table from \"./components/Table\";\nimport data from \"./data.js\";\n\nconst App = () => {\n  return (\n    <>\n      <h1>Employee Directory</h1>\n      <Table employees={data} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}